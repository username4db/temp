package org.tempuri;

import java.net.MalformedURLException;
import java.net.URL;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;

/**
 * This class was generated by Apache CXF 3.5.2 2022-04-12T22:25:28.165+08:00
 * Generated source version: 3.5.2
 *
 */
@WebServiceClient(name = "Weather", wsdlLocation = "file:/C:/Users/user/Downloads/demo/src/main/resources/weather.wsdl", targetNamespace = "http://tempuri.org/")
public class Weather extends Service {

	public final static URL WSDL_LOCATION;

	public final static QName SERVICE = new QName("http://tempuri.org/", "Weather");
	public final static QName WeatherSoap12 = new QName("http://tempuri.org/", "WeatherSoap12");
	public final static QName WeatherSoap = new QName("http://tempuri.org/", "WeatherSoap");
	static {
		URL url = null;
		try {
			url = new URL("file:/C:/Users/user/Downloads/demo/src/main/resources/weather.wsdl");
		} catch (MalformedURLException e) {
			java.util.logging.Logger.getLogger(Weather.class.getName()).log(java.util.logging.Level.INFO,
					"Can not initialize the default wsdl from {0}",
					"file:/C:/Users/user/Downloads/demo/src/main/resources/weather.wsdl");
		}
		WSDL_LOCATION = url;
	}

	public Weather(URL wsdlLocation) {
		super(wsdlLocation, SERVICE);
	}

	public Weather(URL wsdlLocation, QName serviceName) {
		super(wsdlLocation, serviceName);
	}

	public Weather() {
		super(WSDL_LOCATION, SERVICE);
	}

	/**
	 *
	 * @return returns WeatherSoap
	 */
	@WebEndpoint(name = "WeatherSoap12")
	public WeatherSoap getWeatherSoap12() {
		return super.getPort(WeatherSoap12, WeatherSoap.class);
	}

	/**
	 *
	 * @param features A list of {@link javax.xml.ws.WebServiceFeature} to configure
	 *                 on the proxy. Supported features not in the
	 *                 <code>features</code> parameter will have their default
	 *                 values.
	 * @return returns WeatherSoap
	 */
	@WebEndpoint(name = "WeatherSoap12")
	public WeatherSoap getWeatherSoap12(WebServiceFeature... features) {
		return super.getPort(WeatherSoap12, WeatherSoap.class, features);
	}

	/**
	 *
	 * @return returns WeatherSoap
	 */
	@WebEndpoint(name = "WeatherSoap")
	public WeatherSoap getWeatherSoap() {
		return super.getPort(WeatherSoap, WeatherSoap.class);
	}

	/**
	 *
	 * @param features A list of {@link javax.xml.ws.WebServiceFeature} to configure
	 *                 on the proxy. Supported features not in the
	 *                 <code>features</code> parameter will have their default
	 *                 values.
	 * @return returns WeatherSoap
	 */
	@WebEndpoint(name = "WeatherSoap")
	public WeatherSoap getWeatherSoap(WebServiceFeature... features) {
		return super.getPort(WeatherSoap, WeatherSoap.class, features);
	}

}
